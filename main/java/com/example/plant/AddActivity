package com.example.plant;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.FileProvider;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.ActivityOptions;
import android.content.ContentResolver;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.TextView;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URISyntaxException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Objects;

public class AddActivity extends AppCompatActivity {

    EditText name_input, var_input, height_input;
    TextView text_add_pic;
    ImageView imageView_add;
    Button btn_add;

    //用于在接收返回结果时区分不同的请求。 可以使用任意整数作为请求代码。
    public static final int TAKE_PHOTO = 1;//声明一个请求码，用于识别返回结果
    private static final int SCAN_OPEN_PHONE =2;//相册


    private Uri imageUri1;
    public String path1 = null;
    Bitmap bitmap1;
    public static String picpath1 = null;

    public double target1=0;
    public String target_path1=null;

    private PopupWindow mPopWindow;

    @SuppressLint("MissingInflatedId")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add);
        name_input = findViewById(R.id.name_input);
        var_input = findViewById(R.id.var_input);
        height_input = findViewById(R.id.height_input);
        btn_add = findViewById(R.id.btn_add);
        imageView_add = findViewById(R.id.imageView_add);
        text_add_pic = findViewById(R.id.text_add_pic);
        imageView_add.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v){ showPopupWindow(); }
        });


        btn_add.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v){
                String filePath = getFilesDir().getAbsolutePath()+"/image.jpeg";
                Uri fileUri = Uri.parse(filePath);
                Intent intent = new Intent(AddActivity.this, MyDatabaseHelper.class);
                intent.putExtra("fileUri", fileUri);
                startActivity(intent);
                MyDatabaseHelper myDB = new MyDatabaseHelper(AddActivity.this);
                try {
                    myDB.addPlant(name_input.getText().toString().trim(),var_input.getText().toString().trim(), Integer.parseInt(height_input.getText().toString().trim()));
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public void showPopupWindow() {
        //设置contentView
        View contentView = LayoutInflater.from(AddActivity.this).inflate(R.layout.popupwindow, null);
        PopupWindow mPopWindow = new PopupWindow(contentView,
                RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT, true);
        mPopWindow.setContentView(contentView);
        mPopWindow.setAnimationStyle(R.style.contextMenuAnim);

        //设置各个控件的点击响应
        @SuppressLint({"MissingInflatedId", "LocalSuppress"}) Button btn_pop_album = contentView.findViewById(R.id.btn_pop_album);
        Button btn_pop_camera = contentView.findViewById(R.id.btn_pop_camera);
        Button btn_pop_cancel = contentView.findViewById(R.id.btn_pop_cancel);

        btn_pop_album.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                openGallery();
            }
        });
        btn_pop_camera.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                    openCamera();
                }
            }
        });
        btn_pop_cancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent();
                intent.setClass(AddActivity.this,AddActivity.class);
                startActivity(intent);
            }
        });
        View rootview = LayoutInflater.from(AddActivity.this).inflate(R.layout.activity_main, null);
        mPopWindow.showAtLocation(rootview, Gravity.BOTTOM, 0, 0);
    }

    private void openGallery(){
        Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
        //intent.setType("image/*");
        startActivityForResult(intent, SCAN_OPEN_PHONE);

    }

    private void openCamera(){
        /**相机打开失败*/
        String imageName = new SimpleDateFormat("yyyyMMddHHmm", Locale.getDefault()).format(new Date());
//        File outputImage=new File(Environment.getExternalStorageDirectory().getAbsolutePath()+"/data/com.example.woundapplication/"+imageName+".jpg");

        File outputImage = new File(getExternalCacheDir(), imageName+".jpg");

        Objects.requireNonNull(outputImage.getParentFile()).mkdirs();
//        Log.e("", outputImage.getAbsolutePath());
                /*
                创建一个File文件对象，用于存放摄像头拍下的图片，
                把它存放在应用关联缓存目录下，调用getExternalCacheDir()可以得到这个目录，为什么要
                用关联缓存目录呢？由于android6.0开始，读写sd卡列为了危险权限，使用的时候必须要有权限，
                应用关联目录则可以跳过这一步
                 */
        try//判断图片是否存在，存在则删除在创建，不存在则直接创建
        {
            if(outputImage.exists())
            {
                outputImage.delete();
            }
            boolean a = outputImage.createNewFile();
            Log.e("createNewFile", String.valueOf(a));
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        if(Build.VERSION.SDK_INT>=24)
            //判断安卓的版本是否高于7.0，高于则调用高于的方法，低于则调用低于的方法
            //把文件转换成Uri对象
                    /*
                    因为android7.0以后直接使用本地真实路径是不安全的，会抛出异常。
                    FileProvider是一种特殊的内容提供器，可以对数据进行保护
                     */
        {
            imageUri1= FileProvider.getUriForFile(AddActivity.this,
                    "com.example.sqlite.file-provider",outputImage);
            //对应Mainfest中的provider
//            imageUri=Uri.fromFile(outputImage);
            path1 = imageUri1.getPath();
            Log.e(">7:",path1);
        }
        else {
            imageUri1 = Uri.fromFile(outputImage);
            path1 = imageUri1.getPath();

            Log.e("<7:",imageUri1.getPath());

        }

        //使用隐示的Intent，系统会找到与它对应的活动，即调用摄像头，并把它存储
        Intent intent0=new Intent("android.media.action.IMAGE_CAPTURE");
        intent0.putExtra(MediaStore.EXTRA_OUTPUT,imageUri1);
        startActivityForResult(intent0,TAKE_PHOTO);
    }

    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        ImageView img_result=(ImageView) findViewById(R.id.imageView_add);

        switch (requestCode) {
            case TAKE_PHOTO:
                if (resultCode == RESULT_OK) {
                    //将图片解析成Bitmap对象，并把它显现出来
                    String filePath = getFilesDir().getAbsolutePath()+"/image.jpeg";
                    bitmap1 = BitmapFactory.decodeFile(filePath);
                    //注意bitmap，后面再decode就会为空
                    try {
                        bitmap1 = BitmapFactory.decodeStream(getContentResolver().openInputStream(imageUri1));
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    }
//                        bitmap = BitmapFactory.decodeFile(picpath);
                    picpath1 = imageUri1.getPath().toString();
                    Log.e("", imageUri1.getAuthority());

                    Log.e("picpath",picpath1);
                    @SuppressLint("SdCardPath") String fileName = picpath1;
                    img_result.setImageBitmap(bitmap1);
                    img_result.invalidate();
                }break;
            case SCAN_OPEN_PHONE:
                if (resultCode == RESULT_OK){

                    Uri selectImage=data.getData();
                    String[] FilePathColumn={MediaStore.Images.Media.DATA};
                    Cursor cursor = getContentResolver().query(selectImage,
                            FilePathColumn, null, null, null);
                    cursor.moveToFirst();
                    //从数据视图中获取已选择图片的路径
                    int columnIndex = cursor.getColumnIndex(FilePathColumn[0]);
                    picpath1 = cursor.getString(columnIndex);
                    Log.e("picpath",picpath1);
                    cursor.close();
                    bitmap1 = BitmapFactory.decodeFile(picpath1);
                    img_result.setImageBitmap(bitmap1);
                    img_result.invalidate();
                }
                break;
            default:
                break;
        }
    }
}
